#pragma once
#include <cstddef>
#include <string>

namespace FST
{
    struct RELATION
    {
        char symbol;  // —имвол, который должен быть считан дл€ перехода в новое состо€ние
        short nnode;  // »ндекс узла (состо€ни€), в которое нужно перейти, если символ совпадает
        RELATION(
            char c = 0x00,  //  онструктор по умолчанию инициализирует символ 0x00 и узел как -1
            short ns = -1
        );
    };

    struct NODE
    {
        short n_relation;       //  оличество возможных переходов из данного узла (состо€ни€)
        RELATION* relations;    // ћассив возможных переходов (отношений) дл€ данного состо€ни€
        NODE();
        NODE(
            short n,            //  онструктор принимает количество отношений
            RELATION rel, ...   // ѕеречень отношений (переходов), заданных через вариативные аргументы
        );
    };

    struct FST
    {
        const char* string;     // —трока, котора€ будет обрабатыватьс€ автоматом
        short position;         // “екуща€ позици€ в строке (индекс текущего символа)
        short nstates;          //  оличество состо€ний (узлов) в автомате
        NODE* nodes;            // ћассив узлов (состо€ний) автомата
        short* rstates;         // ћассив активных состо€ний в данный момент
        FST(
            const char* s,      //  онструктор принимает строку, количество состо€ний и узлы (вариативные)
            short ns,
            NODE n, ...
        );
        ~FST();                 // ƒеструктор дл€ освобождени€ пам€ти
    };


    bool execute(FST& fst);
    bool step(FST& fst, short*& rstates);
}
